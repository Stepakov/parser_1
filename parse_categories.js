import puppeteer from 'puppeteer-extra'
import fs from 'fs'
import StealthPlugin from 'puppeteer-extra-plugin-stealth'
puppeteer.use(StealthPlugin())

const progressPath = 'progress.json'
const treePath = 'partial_categories.json'

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ–∂–∏–¥–∞–Ω–∏—è
const sleep = time => new Promise(resolve => setTimeout(resolve, time))

// –ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
let progress = { processed: [] }
if (fs.existsSync(progressPath)) {
    progress = JSON.parse(fs.readFileSync(progressPath, 'utf-8'))
}

let fullTree = []
if (fs.existsSync(treePath)) {
    fullTree = JSON.parse(fs.readFileSync(treePath, 'utf-8'))
}

const startTime = Date.now()

puppeteer.launch({
    headless: false,
    args: ['--start-maximized']
}).then(async browser => {
    console.log('üöÄ –ó–∞–ø—É—Å–∫ –±—Ä–∞—É–∑–µ—Ä–∞...')
    const page = await browser.newPage()
    await page.goto('https://www.oleole.pl/', { waitUntil: 'networkidle2' })

    await page.waitForSelector('#onetrust-accept-btn-handler');
    await page.click("#onetrust-accept-btn-handler")

    await page.click('button[data-type="full"]');
    await sleep(2000)
    await page.hover('button[data-type="full"]');
    await sleep(2000)
    await page.click('button[data-type="full"]');
    await sleep(2000)

    const categoryLinks = await page.$$('.category-link');
    const categories = []

    for (const link of categoryLinks) {
        await link.hover()
        try {
            await page.waitForSelector('.reference', { timeout: 3000 })
            await sleep(1000)
            categories.push(...await page.$$eval(
                "p.category-dropdown-header",
                els => els.map(el => el.querySelector('a.reference')?.href).filter(Boolean)
            ))
        } catch (err) {
            console.log('‚ö†Ô∏è –ü–æ–¥–º–µ–Ω—é –Ω–µ –ø–æ—è–≤–∏–ª–æ—Å—å –¥–ª—è –æ–¥–Ω–æ–≥–æ –∏–∑ –ø—É–Ω–∫—Ç–æ–≤.')
        }
    }

    console.log('üìÅ –ù–∞–π–¥–µ–Ω–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–π:', categories.length)

    for (let catUrl of categories) {
        if (progress.processed.includes(catUrl)) {
            console.log(`‚è© –ü—Ä–æ–ø—É—â–µ–Ω–æ (—É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ): ${catUrl}`)
            continue
        }

        const shouldStop = await checkPauseOverlay(page)
        if (shouldStop) {
            fs.writeFileSync(progressPath, JSON.stringify(progress, null, 2), 'utf-8')
            fs.writeFileSync(treePath, JSON.stringify(fullTree, null, 2), 'utf-8')
            await browser.close()
            process.exit(0)
        }

        try {
            const catTree = await parseCategory(page, catUrl)
            if (catTree) {
                fullTree.push(catTree)
                // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–µ—Ä–µ–≤–æ –ø–æ—ç—Ç–∞–ø–Ω–æ
                fs.writeFileSync(treePath, JSON.stringify(fullTree, null, 2), 'utf-8')
            }

            // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
            progress.processed.push(catUrl)
            fs.writeFileSync(progressPath, JSON.stringify(progress, null, 2), 'utf-8')

        } catch (e) {
            console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ ${catUrl}: ${e.message}`)
            if (e.message.includes('403') || e.message.toLowerCase().includes('bot')) {
                console.log('üö® –ë–æ—Ç-–¥–µ—Ç–µ–∫—Ç! –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∏ –≤—ã—Ö–æ–¥–∏–º.')
                fs.writeFileSync(progressPath, JSON.stringify(progress, null, 2), 'utf-8')
                fs.writeFileSync(treePath, JSON.stringify(fullTree, null, 2), 'utf-8')
                await browser.close()
                process.exit(1)
            }
        }
    }

    await browser.close()
    fs.writeFileSync('categories.json', JSON.stringify(fullTree, null, 2), 'utf-8')
    console.log('‚úÖ –ü–æ–ª–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ categories.json')

    const stopTime = Date.now()
    const runSec = Math.floor((stopTime - startTime) / 1000)
    const h = Math.floor(runSec / 3600).toString().padStart(2, '0')
    const m = Math.floor((runSec % 3600) / 60).toString().padStart(2, '0')
    const s = (runSec % 60).toString().padStart(2, '0')
    console.log("‚è±Ô∏è –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: ", `${h}:${m}:${s}`)
})

async function parseCategory(page, url, depth = 0, inheritedCount = null) {
    try {
        await page.goto(url, { waitUntil: 'networkidle2', timeout: 30000 })

        const hasProducts = await page.$('.product-list-results') !== null

        if (hasProducts) {
            const countText = await page.$eval('.category-top__results-count', el => el.innerText).catch(() => '')
            const productCount = parseInt(countText.replace(/[^\d]/g, ''), 10) || inheritedCount || 0
            console.log(`${' '.repeat(depth * 2)}üü° –¢–æ–≤–∞—Ä—ã: ${url} ‚Äî ${productCount} —à—Ç.`)

            return {
                name: await page.title(),
                url,
                productCount,
                products: [] // –º–æ–∂–Ω–æ –≤—ã—Ç—è–≥–∏–≤–∞—Ç—å —Ç–æ–≤–∞—Ä—ã
            }
        }

        const subLinks = await page.$$eval('.categories__leaf', els => {
            return els.map(el => {
                const name = el.querySelector('.leaf-anchor__title')?.innerText.trim()
                const url = el.querySelector('a.category-leaf__title')?.href
                const countText = el.querySelector('.leaf-anchor__count')?.innerText || ''
                const productCount = parseInt(countText.replace(/[^\d]/g, ''), 10)
                return { name, url, productCount }
            }).filter(x => x.url)
        })

        console.log(`${' '.repeat(depth * 2)}üìÅ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: ${url}, –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–π: ${subLinks.length}`)

        const subcategories = []
        for (let sub of subLinks) {
            const result = await parseCategory(page, sub.url, depth + 1, sub.productCount)
            if (result) {
                result.name = sub.name || result.name
                result.url = sub.url || result.url
                result.productCount = result.productCount || sub.productCount || 0
                subcategories.push(result)
            }
        }

        return {
            name: await page.title(),
            url,
            subcategories
        }

    } catch (e) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ', url, e.message)
        return null
    }
}

let pauseCounter = 0;

async function checkPauseOverlay(page) {
    const isPaused = await page.$('.przerwa') !== null || await page.$('#przerwa') !== null;

    if (isPaused) {
        pauseCounter++;
        console.log(`‚è∏Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –æ–∫–Ω–æ –ø–∞—É–∑—ã (–ø–æ–ø—ã—Ç–∫–∞ ‚Ññ${pauseCounter})`);

        if (pauseCounter < 3) {
            console.log('‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ 10 —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ–º...')
            await sleep(10000)
            return false; // –Ω–µ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º—Å—è
        } else {
            console.log('üõë –ë–ª–æ–∫ –ø–æ–≤—Ç–æ—Ä–∏–ª—Å—è 3 —Ä–∞–∑–∞. –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–∫—Ä–∏–ø—Ç, –º–æ–∂–Ω–æ –∑–∞–ø—É—Å—Ç–∏—Ç—å —Å–Ω–æ–≤–∞ –ø–æ–∑–∂–µ.')
            return true; // —Å–∏–≥–Ω–∞–ª –∫ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ
        }
    }

    return false;
}
